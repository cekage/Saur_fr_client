"""
This type stub file was generated by pyright.
"""

from typing import Any, NewType

"""
This type stub file was generated by pyright.
"""
_LOGGER = ...
BASE_SAUR = ...
BASE_DEV = ...
USER_AGENT = ...
SaurResponse = dict[str, Any]
SaurResponseDelivery = NewType("SaurResponseDelivery", SaurResponse)
SaurResponseLastKnow = NewType("SaurResponseLastKnow", SaurResponse)
SaurResponseMonthly = NewType("SaurResponseMonthly", SaurResponse)
SaurResponseWeekly = NewType("SaurResponseWeekly", SaurResponse)
SaurResponseContracts = NewType("SaurResponseContracts", SaurResponse)
class SaurApiError(Exception):
    """Exception personnalisée pour les erreurs de l'API SAUR."""
    ...


class SaurClient:
    """Client pour interagir avec l'API SAUR."""
    token_url: str
    weekly_url: str
    monthly_url: str
    last_url: str
    delivery_url: str
    def __init__(self, login: str, password: str, unique_id: str = ..., clientId: str = ..., dev_mode: bool = ..., token: str = ...) -> None:
        """Initialise le client SAUR.

        Args:
            login: L'identifiant pour l'API SAUR.
            password: Le mot de passe pour l'API SAUR.
            unique_id: L'identifiant unique du compteur.
            dev_mode: Indique si l'on utilise l'environnement de
                      développement (True) ou non (False).
                      Par défaut, la valeur est False (environnement
                      de production).
            token: Le token pour économiser un auth().
        """
        ...
    
    def __str__(self) -> str:
        ...
    
    async def get_weekly_data(self, year: int, month: int, day: int, section_id: str | None = ...) -> SaurResponseWeekly:
        """Récupère les données hebdomadaires."""
        ...
    
    async def get_monthly_data(self, year: int, month: int, section_id: str | None = ...) -> SaurResponseMonthly:
        """Récupère les données mensuelles."""
        ...
    
    async def get_lastknown_data(self, section_id: str | None = ...) -> SaurResponseLastKnow:
        """Récupère les dernières données connues."""
        ...
    
    async def get_deliverypoints_data(self, section_id: str | None = ...) -> SaurResponseDelivery:
        """Récupère les points de livraison."""
        ...
    
    async def get_contracts(self) -> SaurResponseContracts:
        """Récupère les points de livraison."""
        ...
    
    async def close_session(self) -> None:
        """Ferme la session aiohttp."""
        ...
    
    async def __aenter__(self):
        """Initialise la session aiohttp si nécessaire."""
        ...
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """Ferme la session aiohttp."""
        ...
    


